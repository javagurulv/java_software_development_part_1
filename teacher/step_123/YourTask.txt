В процессе разработки программного обеспечения
создание разных версий приложения и сохранение
их артефактов, таких как JAR-файлы, в репозитории
имеет ряд важных причин:

### 1. **Управление изменениями**
Разработка программного обеспечения - это
итеративный процесс. С течением времени
добавляются новые функции, исправляются ошибки
и вносятся улучшения. Версии помогают отслеживать
эти изменения. Каждая версия служит "снимком"
состояния кода на определённый момент времени,
что позволяет разработчикам понимать, когда и какие
изменения были внесены.

### 2. **Откат к предыдущим версиям**
Если новая версия приложения вносит проблемы или
ошибки, наличие предыдущих версий позволяет легко
вернуться к стабильному состоянию. Это снижает риски
для бизнеса и пользователей.

### 3. **Упрощение совместной работы**
Когда команда разработчиков работает над одним
проектом, версии обеспечивают согласованность работы.
Разработчики могут ссылаться на конкретные версии,
делиться ими и обсуждать изменения, не беспокоясь о
том, что их локальные изменения повлияют на работу
других.

### 4. **Удобство для пользователей и развертывание**
Пользователи и системные администраторы могут
выбирать, какую версию программы установить или
обновить, исходя из своих нужд или возможностей
оборудования. Различные версии также позволяют
поэтапно внедрять новые функции, обеспечивая плавный
переход между обновлениями.

### 5. **Совместимость с зависимостями**
В больших проектах приложения часто зависят от
сторонних библиотек или модулей. Разные версии
этих зависимостей могут несовместимы между собой.
Версионирование позволяет контролировать, какая
версия каждой зависимости используется, предотвращая
конфликты и проблемы совместимости.

### 6. **Поддержка и обслуживание**
Версионирование позволяет разработчикам обеспечивать
поддержку определённых версий приложения, предоставляя
обновления и исправления для критических ошибок, в
то время как новые функции могут разрабатываться
параллельно для будущих версий.

### Заключение
Версионирование и сохранение артефактов в репозитории
создают основу для надёжной, предсказуемой и
эффективной разработки программного обеспечения.
Это практика, которая способствует качеству продукта,
упрощает процесс разработки и предоставляет гибкость
как разработчикам, так и пользователям.



Локальный Maven репозиторий — это специальная
директория на компьютере разработчика, в которой
хранятся все библиотеки и их версии, скачанные и
используемые Maven в рамках проектов. Maven — это
инструмент для автоматизации сборки проектов,
управления зависимостями и развертывания программного
обеспечения, широко используемый в Java-разработке.

### Ключевые аспекты локального Maven репозитория:

#### 1. **Автоматическое управление зависимостями:**
Когда в файле `pom.xml` проекта указывается
зависимость, Maven автоматически скачивает необходимые
библиотеки и их зависимости из удалённого репозитория
(например, Maven Central) и сохраняет их в локальный
репозиторий. Это обеспечивает автоматическое и
централизованное управление всеми зависимостями проекта.

#### 2. **Оптимизация сетевого трафика и времени сборки:**
После того как зависимость загружена в локальный
репозиторий, Maven будет использовать локальную
копию для всех последующих сборок проектов, которые
требуют эту зависимость. Это уменьшает необходимость
повторных скачиваний и ускоряет процесс сборки.

#### 3. **Централизованное хранение:**
Локальный репозиторий служит единым местом хранения
для всех библиотек и их версий, используемых в
различных проектах на компьютере разработчика. Это
упрощает управление библиотеками и обеспечивает их
быстрый доступ.

#### 4. **Версионирование библиотек:**
Maven строго следует принципу версионирования
зависимостей, позволяя разработчикам легко
переключаться между разными версиями библиотек,
не нарушая работу проекта. Это способствует
стабильности и управляемости проектов.

### Расположение локального репозитория:
По умолчанию локальный репозиторий Maven находится
в домашнем каталоге пользователя под директорией
`.m2/repository` (например,
`C:\Users\Username\.m2\repository` на Windows или
`/home/username/.m2/repository` на Unix-подобных
системах). Путь к локальному репозиторию можно
изменить, указав новый путь в файле конфигурации
Maven — `settings.xml`.

### Заключение:
Локальный Maven репозиторий играет важную роль
в экосистеме Maven, облегчая управление зависимостями
и сборку проектов. Он обеспечивает быстрый доступ
к необходимым библиотекам и их версиям, способствуя
эффективной и организованной разработке.


Ментор добавил в build.gradle файл проекта плагин
для публикации версии приложения в локальный Maven
репозиторий.

Ваша задача:
Узнать больше информации про:
- локальный Maven репозиторий;
- изучить структуру локального Maven репозитория;
- процесс версионирования (присвоения новых версий);
- процесс публикации версий приложения;

Разобраться в изменениях build.gradle сделанных ментором.

Запустить Gradle таск publishing и
проверить появляется ли версия приложения в
локальном Maven репозитории на вашем компьютере.

PS: не забудьте по окончанию выполнения шага создать и заполнить
файл /documentation/Step_X_description.txt. Формат заполнения этого
файла описан в step_1 в файле Learning_reflection.txt.