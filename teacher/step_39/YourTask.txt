Ментор обращает ваше внимание на то, что у классов
валидаций почти одинаковая публичная часть. У них у всех есть
один публичный метод, который принимает в качестве параметра
запрос и возвращает в качестве результата Optional<ValidationError>.

Ваша задача:
1) сделать для всех классов валидаций общий интерфейс
(метод в интерфейсе можно назвать execute(...);
2) новый интерфейс поместить в пакет core/validations;
3) сделать новый интерфейс public;
4) сделать все классы валидаций packege level access
(убрать public с классов, чтобы они были доступны только внутри пакета);
5) В классе TravelCalculatePremiumRequestValidator воспользуйтесь
вместо @Autowire каждого класса валидации в отдельности

    @Autowired
    private List<TravelRequestValidation> travelValidations;

Так как все классы валидации реализуют новый интерфейс и являются
компонентами в Spring (@Component), то Spring позволяет вот таким
способом получить список всех объектов (классов), которые реализуют
указанный интерфейс и являются компонентами.

Так как нам не принципиально в каком порядке применять валидации,
главное просто применить их все, то мы можем просто пройти по
списку полученных классов валидаций и просто применить каждую
для валидации запроса. Реализуйте это в классе
TravelCalculatePremiumRequestValidator.
Исправьте тесты если они перестанут работать.

Благодаря публичному интерфейсу и дизайн паттерну IoC нам
удалось скрыть (сделать package level access) конкретные реализации
интерфейса и поместить их в отдельный пакет. Это отличный архитектурный
приём создания модуля внутри приложения. Запомните его и пользуйтесь им.