Ментор обратил ваше внимание на то, что после перевода системы
на коды ошибок в коде осталось много повторений. Это касается
кода создания экземпляров класса ValidationError:

    private ValidationError buildError(String errorCode) {
        String errorDescription = errorCodeUtil.getErrorDescription(errorCode);
        return new ValidationError(errorCode, errorDescription);
    }

Ментор предлагает вынести этот кусочек кода в класс
ValidationErrorFactory и пользоваться этим классом
во всех местах программы где нужно создавать экземпляр
класса ошибки.


Ваша задача: реализовать предложение ментора.

PS: так же найдите информацию про дизайн паттерн Factory
в интернете и ознакомьтесь с ней.


Совет: в этом задании нужно сделать много изменений.
Код, который дублируется расположен в большом количестве классов.
Не старайтесь сделать все изменения одним большим куском.
Попробуйте разбить все необходимые изменения на маленькие подзадачи.

Чем меньше будет подзадача, тем быстрее вы с ней справитесь!

Делать большие изменения в коде проще, надежнее
и быстрее маленькими шагами, маленькими итерациями!

Примерный план реализации требований может выглядеть так:
- создать новый класс ValidationErrorFactory;
- скопировать в него общую логику;
- сделать этот класс компонентом;

- найти в коде первый класс где есть повторяющаяся логика;
- воспользоваться новым классом и удалить повторяющийся код;
- запустить тесты - они упадут так как код класса поменялся;
- исправить упавшие тесты;
- запустить тесты еще раз - убедиться что они все проходят;

- найти в коде следующий класс где есть повторяющаяся логика;
- повторить для него действия выше.

И так до тех пор, пока не будут внесены все изменения в код.

Работа с кодом это инкрементальный, итерационный процесс!

На каждом шаге программисты улучшают код или расширяют его функциональность.

Любые изменения в коде лучше делать маленькими шагами!

Программист как художник, который чистый холст маленькими шагами
превращает в произведение искусства.

Нельзя сделать большую задачу хорошо и качественно за один раз.

Большие задачи решаются и качественные проекты создаются маленькими,
инкрементальными изменениями, вносимыми в код проекта на регулярной основе!