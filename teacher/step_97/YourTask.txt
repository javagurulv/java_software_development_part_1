Ментор обращает ваше внимание на класс TravelPremiumCalculationResult:

@Getter
@Setter
@AllArgsConstructor
public class TravelPremiumCalculationResult {

    private BigDecimal totalPremium;

    private List<RiskPremium> riskPremiums;

}

На примере этого класса ментор хочет рассказать вам о том,
что такое immutable (не изменяемые) классы и для чего их используют.

Класс TravelPremiumCalculationResult представляет собой результаты
расчета премии для одной персоны. Он содержит как общую премию
(totalPremium), так и премии для каждого риска в отдельности
(riskPremiums).

Задумайтесь вот о чем. Нужна ли нам необходимость изменять эти
данные после того как расчет премии уже выполнен? То есть, модуль
underwriting был вызван и он рассчитал премию для полиса. Нужна ли нам
необходимость менять эти данные после завершения расчета?

В действительности изменять результаты расчета премии вне модуля
underwriting не корректно с точки зрения архитектуры самой системы.
Мы специально создавали модуль underwriting в нашем приложении для
того, чтобы вынести в него всю логику расчета премии. Так сказать
локализовать (поместить в одно место) всю логику расчета премии,
чтобы с ней было проще работать.

Как добиться того, чтобы результаты расчета премии
были не изменяемыми (immutable)?

Для этого в программировании используют понятие immutable объекта.

Immutable объект - это объект состояние которого нельзя изменить
после его создания. То есть в нашем случае нам нужно добиться того,
чтобы мы могли создавать объекты класса TravelPremiumCalculationResult,
но после создания таких объектов изменять хранящиеся в них данные
было бы нельзя.

Подумайте как этого можно добиться!

Это можно сделать несколькими способами:
- просто созданием Java класса руками без сторонних библиотек;
- при помощи Lombok библиотеки;
- при помощи Java record.

Ваша задача: попробовать реализовать все три способа описанных выше.
Выбрать из них наилучший на ваш взгляд. Обосновать ваш выбор.
Оставить в проекте ваш выбор в виде решения.

PS: использование immutable объектов позволяет создавать более
надежный и отказоустойчивый код. Так как у нас появляются гарантии
того, что данные хранящиеся в immutable объектах ни один код в нашей
системе не изменит.