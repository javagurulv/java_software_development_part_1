В прошлом задании ментор вас попросил написать тесты
для класса TravelCalculatePremiumServiceImpl.

Удалось ли вам это сделать?
(если нет то ничего страшного, это было действительно сложное задание)

Было ли сложно написать тесты на этот класс?

Как вы думаете в чём заключалась сложность при создании тестов?

Прежде чем читать дальше поразмышляйте над вопросами выше.
Это действительно важно!


В действительности написать качественные тесты на класс
TravelCalculatePremiumServiceImpl очень сложно. И на это есть
очень веская причина.

Ментор специально сделал класс TravelCalculatePremiumServiceImpl
таким, чтобы вы "помучились" с написанием тестов.

В действительности мы хотим показать вам, как тесты могут помогать
в написании качественного кода. Запомните следующее: если тесты
написать сложно, значит код который вы тестируете плохой!

На простой и качественный код писать тесты одно удовольствие.
Если код простой, то и тесты тоже будут простыми.

И наоборот. Если код сложный, то и тесты для него будут такими же.
Невозможно написать простые, красивые и понятные тесты на сложный
код.

Тесты в умелых руках могут быть индикатором качества тестируемого кода!

При написании тестов всегда прислушивайтесь к своему внутреннему
голосу, следите за своими ощущениями. Если вам начинает казаться,
что тест становится большим, сложным в написании, требующим большого
количества вспомогательного кода, то это значит, что тестируемый
вами код имеет проблемы!

В такой момент времени нужно остановиться и обратить свое внимание
на тот код, который вы пытаетесь протестировать. Проблемы именно в
нём, и решать их надо именно там, а не в тестах.

Классы, для которых написать тесты сложно страдают одними и теми же
проблемами:
- большие и длинные методы;
- много строчек кода в самом классе;
- перегруженность - класс реализуем сразу несколько разных задач;
- запутанный и сложный код.

На маленький и простой класс написать тесты очень просто.

Чем класс становится больше, тем тесты писать сложнее!

Что делать, если вы обнаружили одну или
несколько упомянутых выше проблем в своём классе?

Обычно помогает разделение класса на несколько более маленьких
классов, выделение части функционала (части ответственности)
в другой класс.

Реализовав разделение класса на более маленькие классы
(выделив часть функциональности в новый класс или классы)
вы упростите код в вашем классе, сделаете его более коротким
и понятным. За кодом последуют и тесты!

Ваша задача:
Попробуйте выделить часть функциональности класса
TravelCalculatePremiumServiceImpl в отдельный класс или классы.
После выполнения рефакторинга, поправьте и напишите новые тесты.

Как закончите, сравните своё решение с решением ментора,
которое вы найдёте в этом шаге. Возможно вы почерпнёте из
него идеи как еще можно улучшить код и тесты. Примените
найденные идеи в своём проекте, чтобы сделать ваш код
еще более качественным, а тесты более простыми.