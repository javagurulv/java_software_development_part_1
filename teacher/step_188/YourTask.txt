Ментор принес отличные новости.

Компания переводит наше приложение на микро сервисную архитектуру!

Первый шаг в этом направлении - научиться собирать и запускать наше
приложение в Docker контейнере.

Установите на ваш компьютер Docker Desktop приложение (версия 4.24.2).
Это может потребовать установки обновлений в Windows:
Settings -> Update & Security -> Windows Update -> Advanced Options
Выберите галочку: Receive updates for other Microsoft products
when you update Windows.
Вернитесь на Settings -> Update & Security -> Windows Update
и нажмите кнопку Check for updates.
Для корректной работы Docker Desktop необходимо получить обновления
компонента WSL2 (Windows Subsystem for Linux).

В Docker Desktop после установки зайдите в Settings
активизируйте галочку Expose daemon on tcp://localhost:2375 without TLS
в закладке General.

Для сборки контейнера поместите в корень своего проекта файл Docker
со следующим содержимым:

FROM openjdk:18-jdk-alpine
COPY insurance-calculator-1.0.2.jar insurance-calculator.jar
ENTRYPOINT ["java"]
CMD ["-jar", "insurance-calculator.jar"]
EXPOSE 8080


Запустите Docker Desktop приложение на компьютере.

Для сборки Docker контейнера можно использовать следующий
плагин Gradle:

plugins {
	id 'com.palantir.docker' version '0.26.0'
}

docker {
	dependsOn build
	name "insurance-calculator:1.0.2"
	files 'build/libs/insurance-calculator-1.0.2.jar'
	buildArgs(['JAR_FILE': "insurance-calculator-1.0.2.jar"])
}

В Gradle вызовите команду docker. Она выполнит полную сборку
проекта (dependsOn build) в результате которой будет создан
fat jar, далее на основе конфигурации и полученного при сборке
приложения fat jar будет создан Docker контейнер. Если команда
выполнится успешно, то созданный контейнер можно будет видеть
в Docker Desktop в разделе Images.

Далее запустите созданный Docker контейнер в Docker Desktop,
при запуске разверните дополнительные опции (Optional Settings)
и укажите в Ports 8080. Если приложение поднимется нормально,
то оно будет доступно в браузере (http://localhost:8080/insurance/travel/web/v1)
и для отсылки REST запросов.