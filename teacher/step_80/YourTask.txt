Почему в Java классы делят на пакеты? По какому принципу это делают?

Разделение классов по пакетам в Java — это важный аспект проектирования программного обеспечения,
который помогает обеспечить чистоту кода, его модульность и легкость в поддержке.
Вот несколько основных принципов, которые используются при организации классов по пакетам:

1. **Логическая когерентность**:
Классы, выполняющие схожие функции или тесно связанные друг с другом с точки зрения бизнес-логики,
должны находиться в одном пакете. Например, классы, относящиеся к управлению заказами в интернет-магазине,
могут быть сгруппированы в пакете `com.myshop.orders`.

2. **Инкапсуляция**:
Пакеты могут использоваться для инкапсуляции данных и методов, делая некоторые из них внутренними
для пакета и недоступными для внешних пользователей. Это помогает сократить зависимости между
различными частями приложения и упрощает поддержку и изменение кода.

3. **Снижение зависимостей**:
Пакеты должны быть спроектированы таким образом, чтобы минимизировать зависимости между ними.
Это облегчает переиспользование пакетов и поддерживает принципы модульности.
Хорошая практика — избегать круговых зависимостей между пакетами.

4. **Поддержание абстракций**:
Пакеты могут быть организованы вокруг абстракций. Например, базовые интерфейсы и абстрактные классы
могут быть размещены в одном пакете, а их конкретные реализации — в другом.

5. **Пространство имен**:
Пакеты в Java также действуют как пространства имен, что позволяет избежать конфликтов именования.
Название пакета должно быть уникальным и обычно следует обратной записи доменного имени,
что обеспечивает уникальность на глобальном уровне.

6. **Рефакторинг и масштабирование**:
С течением времени и развитием проекта структура пакетов может эволюционировать.
Важно регулярно пересматривать и при необходимости рефакторить организацию пакетов,
чтобы она отражала текущие нужды проекта и поддерживала его масштабируемость.

7. **Следование стандартам и соглашениям**:
Каждый проект или организация могут разработать собственные стандарты и соглашения
по именованию и организации пакетов, чтобы обеспечить последовательность и предсказуемость в структуре кода.

Применяя эти принципы, разработчики могут создавать четко структурированные,
модульные и легко поддерживаемые Java-приложения.


Очень часто классы по пакетам делят согласно функциональному принципу.
Например, классы используемые в процессе валидации данных размещают
в пакете validations. Для классов отвечающих за расчет стоимости страховки
создают пакет underwriting (в сфере страхования этот термин означает
процесс расчета премии - стоимости страховки). Таким образов в коде
появляются функциональные модули (валидации и underwriting). Таким образом
пакеты в Java служат для разделения всей кодовой базы приложения на
функциональные модули и определение их границ.

Так же есть и другой способ деления классов по пакетам.
Назовем его технологический. Он связан с теми технологиями,
которые используются в проекте. Например, типичный пример
технологического деления кода на пакеты это пакет rest.
В пакете rest лежат классы, которые используются на уровне
REST интеграции (REST контроллер). Пакет dto это тоже
пример технологического деления классов по пакетам. Он
связан с дизайн паттерном DTO (Data Transfer Object).

В следующих нескольких шагах проекта вам предстоит
создать новые пакеты и разделить код приложения между ними.
Проследите за логикой деления классов на пакеты и попробуйте
соотнести ее с правилами приведенными выше.

Учитесь делить код вашего проекта на пакеты, это сделает ваши
проекты более качественными, модульными и более легкими в поддержке!

PS: не забудьте по окончанию выполнения шага создать и заполнить
файл /documentation/Step_X_description.txt. Формат заполнения этого
файла описан в step_1 в файле Learning_reflection.txt.